// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: service/v1/service.proto

package servicev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProverberServiceClient is the client API for ProverberService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProverberServiceClient interface {
	// Proverb returns a Go proverb.
	Proverb(ctx context.Context, in *ProverbRequest, opts ...grpc.CallOption) (*ProverbResponse, error)
}

type proverberServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProverberServiceClient(cc grpc.ClientConnInterface) ProverberServiceClient {
	return &proverberServiceClient{cc}
}

func (c *proverberServiceClient) Proverb(ctx context.Context, in *ProverbRequest, opts ...grpc.CallOption) (*ProverbResponse, error) {
	out := new(ProverbResponse)
	err := c.cc.Invoke(ctx, "/service.v1.ProverberService/Proverb", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProverberServiceServer is the server API for ProverberService service.
// All implementations should embed UnimplementedProverberServiceServer
// for forward compatibility
type ProverberServiceServer interface {
	// Proverb returns a Go proverb.
	Proverb(context.Context, *ProverbRequest) (*ProverbResponse, error)
}

// UnimplementedProverberServiceServer should be embedded to have forward compatible implementations.
type UnimplementedProverberServiceServer struct {
}

func (UnimplementedProverberServiceServer) Proverb(context.Context, *ProverbRequest) (*ProverbResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Proverb not implemented")
}

// UnsafeProverberServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProverberServiceServer will
// result in compilation errors.
type UnsafeProverberServiceServer interface {
	mustEmbedUnimplementedProverberServiceServer()
}

func RegisterProverberServiceServer(s grpc.ServiceRegistrar, srv ProverberServiceServer) {
	s.RegisterService(&ProverberService_ServiceDesc, srv)
}

func _ProverberService_Proverb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProverbRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverberServiceServer).Proverb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.ProverberService/Proverb",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverberServiceServer).Proverb(ctx, req.(*ProverbRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProverberService_ServiceDesc is the grpc.ServiceDesc for ProverberService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProverberService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.v1.ProverberService",
	HandlerType: (*ProverberServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Proverb",
			Handler:    _ProverberService_Proverb_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/v1/service.proto",
}
